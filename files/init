#!/bin/sh

set -x

export PATH=/bin:/sbin

mount -o move /dev /target_tmp/dev
mount -o move /proc /target_tmp/proc
mount -o move /sys /target_tmp/sys
mount -o move /mnt /target_tmp/mnt
mount -o move /debug_ramdisk /target_tmp/debug_ramdisk
mount -o move /metadata /target_tmp/metadata
mount -o move /vendor /target_tmp/vendor
mount -o move /odm /target_tmp/odm
#TODO: Other mount points for non-GSI (system_ext? product?)

mount -t proc none /proc
mount -t sysfs none /sys
mount -t configfs none /config
mount -t tmpfs none /dev
mount -t tmpfs none /tmp
mount -t pstore none /sys/fs/pstore

mdev -s
mdev -d

gadget=/config/usb_gadget/g1
echo > $gadget/UDC
rm -Rf $gadget/configs
rm -Rf $gadget/configs
mkdir $gadget
echo 0x12d1 > $gadget/idVendor
echo 0x103A > $gadget/idProduct
mkdir -p $gadget/strings/0x409
echo phh > $gadget/strings/0x409/serialnumber
echo phh > $gadget/strings/0x409/manufacturer
echo phh > $gadget/strings/0x409/product

# Setup mass_storage with current dmesg + pstore
mkdir $gadget/functions/mass_storage.0
echo 1 > $gadget/functions/mass_storage.0/lun.0/removable
dmesg > /tmp/tmp-img
cat /sys/fs/pstore/* >> /tmp/tmp-img
echo /tmp/tmp-img > $gadget/functions/mass_storage.0/lun.0/file

# Setup ACM (acts as a serial port. Nothing to setup)
mkdir $gadget/functions/acm.0

# Setup NCM (acts as a network interface. Nothing to setup)
mkdir $gadget/functions/ncm.0

# Configure the gadget with all the functions
mkdir $gadget/configs/c.1/
mkdir $gadget/configs/c.1/strings/0x409
echo 'ADB MTP' > $gadget/configs/c.1/strings/0x409/configuration

#TODO: Error handling? what happens if one of the functions failed? We should be graceful
ln -s $gadget/functions/ncm.0 $gadget/configs/c.1/f1
ln -s $gadget/functions/mass_storage.0 $gadget/configs/c.1/f2
ln -s $gadget/functions/acm.0 $gadget/configs/c.1/f3

# Disable watchdogs
echo -n V > /dev/watchdog
echo -n V > /dev/watchdog0
echo -n V > /dev/watchdog1

echo > $gadget/UDC
ls /sys/class/udc |head -n 1  | cat > $gadget/UDC
echo 2 > /sys/devices/virtual/android_usb/android0/port_mode

ifconfig -a

ifconfig lo 127.0.0.1 up
ifconfig ncm0 192.168.2.3 up
ifconfig usb0 192.168.2.3 up
ifconfig $(cat $gadget/functions/ncm.0/ifname) 192.168.2.3 up

(
set +x
while ! [ -f /dev/do-boot ];do
echo > $gadget/functions/mass_storage.0/lun.0/file
dmesg > /tmp/tmp-img
cat /sys/fs/pstore/* >> /tmp/tmp-img
echo /tmp/tmp-img > $gadget/functions/mass_storage.0/lun.0/file
sleep 2
done) &


mkdir -p /dev/block/mapper
ln -s /dev/mapper/control /dev/device-mapper
for i in $(cd /sys/devices/virtual/block/; echo dm-*);do
    name=$(cat /sys/devices/virtual/block/$i/dm/name)
    ln -s /dev/$i /dev/block/mapper/$name
done

PARTNAME=""
DEVNAME=""
mkdir -p /dev/block/by-name
for i in $(cd /sys/dev/block; echo *);do
    U=/sys/dev/block/$i/uevent
    PARTNAME=$(sed -nE 's/PARTNAME=//p' $U)
    DEVNAME=$(sed -nE 's/DEVNAME=//p' $U)
    if [ -n "$PARTNAME" ] && [ -n "$DEVNAME" ];then
        ln -s /dev/$DEVNAME /dev/block/by-name/$PARTNAME
    fi
    PARTNAME=""
    DEVNAME=""
done

if [ -b /dev/block/mapper/system_phh ];then
    mount -o ro /dev/block/mapper/system_phh /target
    mount -o move /target_tmp/dev /target/dev
    mount -o move /target_tmp/proc /target/proc
    mount -o move /target_tmp/sys /target/sys
    mount -o move /target_tmp/mnt /target/mnt
    mount -o move /target_tmp/debug_ramdisk /target/debug_ramdisk
    mount -o move /target_tmp/metadata /target/metadata
    mount -o move /target_tmp/vendor /target/vendor
    mount -o move /target_tmp/odm /target/odm
    #TODO: Other mount points for non-GSI (system_ext? product?)
fi

# UNCOMMENTME: To grab kernel logs to ttyGS0 you'll need SELinux permissive
#(cat /proc/cmdline |tr -d '\n'; echo " " androidboot.selinux=permissive ) > /dev/cmdline
#chmod 0400 /dev/cmdline
#mount -o bind /dev/cmdline /target/proc/cmdline


# UNCOMMENTME: To have unauthenticated adb
# cp /target/vendor/default.prop /dev/vendor_default.prop
# sed -i -e '/adb.secure/d' /dev/vendor_default.prop
# chmod 0400 /dev/vendor_default.prop
# mount -o bind /dev/vendor_default.prop /target/vendor/default.prop

pause=false
for i in $(seq 1 10);do
    echo "Hello world, press enter to pause" > /dev/ttyGS0
    if timeout 2 sh -c 'read i < /dev/ttyGS0';then
        pause=true
        break
    fi
done

while $pause && ! [ -f /dev/do-boot ];do
    sh <> /dev/ttyGS0 >&0 2>&1
    #setsid sh -c 'exec command <> /dev/ttyGS0 >&0 2>&1'
done

[ -f /dev/do-boot ] && source /dev/do-boot

pkill -f mdev

cat /dev/kmsg > /dev/ttyGS0 &

sleep 5

# COMMENTME: To grab kernel logs to ttyGS0 you need to keep usb gadget open
echo > $gadget/UDC
rm $gadget/configs/c.1/f3
rm $gadget/configs/c.1/f2
rm $gadget/configs/c.1/f1
rmdir $gadget/configs/c.1/strings/0x409/
rmdir $gadget/configs/c.1/strings/0x409
rmdir $gadget/configs/c.1
rmdir $gadget/configs/c.1/
# END OF COMMENTME

cd /target
pivot_root /target debug_ramdisk
exec /debug_ramdisk/bin/busybox chroot . /system/bin/init selinux_setup

#telnetd -F

sleep 30
reboot
